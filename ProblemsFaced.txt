header{
    margin: -8px;
    padding: 0px;

}
.header1{
    background-color: black;
    color: white;
} 
.lang{
    display: inline-block;
    margin-top: 50px;
}
.lang select{
    width: 10em;
    margin-left: 30px;
}
.lang option[value]{
    font-size: 1.2em;
    text-align: center;
    color: darkblue;
    background-color: rgb(133, 133, 29);
}
.header1 nav{
    width: 700px;
    margin: auto;
    transform: translate(0%, -180%); 
}
.header1 nav li{
    display: inline-block;
}
.header1 nav li a{
    text-decoration: none;
    margin: 20px;
    color: white;
}

.logo{
    width: 6%;
    border-radius: 20px;
    margin-left: 90%;
    transform: translate(0%,-90%);
} 

The header1 background color extended beyond the content height.
When,
.header1 {
    background-color: black;
    color: white;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 20px;
}
these were used, the problem resolved.

Why when margin-bottom for .seventy is changed, the background color width changes for .main

How to make prev and next buttons work in a circular way?

Through this, it can be done.

const content = [
    `<p>Exclusive Product New Arrival</p>

    <h2>Fit Low Carb</h2>
    <h2>CANDY BAR</h2>

    <p>Sugar-Free</p>
    <br>
    <p>BREAKFAST PRODUCTS ON SALE</p>
    <br>
    <h2>UP TO </h2>
    <span class="seventy">70%</span>`,
    `<p>Exclusive Product New Arrival</p>

    <h2>Organic Coffee</h2>
    <h2>SPECIAL BLEND</h2>

    <p>Sugar-Free</p>
    <br>
    <p>BREAKFAST PRODUCTS ON SALE</p>
    <br>
    <h2>UP TO </h2>
    <span class="fifty">50%</span>`
];

let currentIndex = 0;

const prev = document.getElementsByClassName('prevbtn')[0];
const next = document.getElementsByClassName('nextbtn')[0];
const section = document.getElementsByClassName('sec1')[0];

prev.addEventListener('click', () => {
    currentIndex = (currentIndex - 1 + content.length) % content.length;
    section.innerHTML = content[currentIndex];
});

next.addEventListener('click', () => {
    currentIndex = (currentIndex + 1) % content.length;
    section.innerHTML = content[currentIndex];
});